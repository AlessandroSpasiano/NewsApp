plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-android-extensions"
}

apply plugin: "kotlin-kapt"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolVersion

    defaultConfig {
        manifestPlaceholders = [hostname: "it.alexs"]
        applicationId "it.alexs.newsapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "it.alexs.newsapp.NewsApplicationTestRunner"
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }

        staging {
            initWith debug
            manifestPlaceholders = [hostname: "internal.alexs"]
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
    }

    testBuildType = "staging"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }
    sourceSets {
        staging {
            java {
                srcDirs 'src\\staging\\java'
            }
        }
    }
    dynamicFeatures = [":listnews"]
}

dependencies {
    implementation project(path: ":common-library", configuration: 'default')
    implementation project(path: ":news-library", configuration: 'default')
    implementation project(path: ":mvvm-library", configuration: 'default')
    implementation project(path: ":ui-library", configuration: 'default')


    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "androidx.core:core-ktx:${androidxCoreKtxVersion}"
    implementation "androidx.appcompat:appcompat:${androidxAppCompatVersion}"
    implementation "com.google.android.material:material:${materialVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${swiperefreshLayoutversion}"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"

    //Google
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // Coroutine kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutineAndroidVersion}"

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    // OkHttp
    implementation "com.squareup.okhttp3:logging-interceptor:${loggingVersion}"

    // Timber
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${viewModelKtxVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${liveDataKtxVersion}"

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "androidx.arch.core:core-testing:${testCoreVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    androidTestImplementation "androidx.test:rules:${testRuleVersion}"
    androidTestImplementation "androidx.test.ext:junit:${extJunitVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoCoreVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espressoCoreVersion}"
    androidTestImplementation "androidx.test:runner:${testRunnerVersion}"

}